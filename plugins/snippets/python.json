{
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:expression}:",
            "\t${2:pass}"
        ],
        "description": "Code snippet for an if statement"
    },
    "if/else": {
        "prefix": "if/else",
        "body": [
            "if ${1:condition}:",
            "\t${2:pass}",
            "else:",
            "\t${3:pass}"
        ],
        "description": "Code snippet for an if statement with else"
    },
    "elif": {
        "prefix": "elif",
        "body": [
            "elif ${1:expression}:",
            "\t${2:pass}"
        ],
        "description": "Code snippet for an elif"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else:",
            "\t${1:pass}"
        ],
        "description": "Code snippet for an else"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ${1:expression}:",
            "\t${2:pass}"
        ],
        "description": "Code snippet for a while loop"
    },
    "while/else": {
        "prefix": "while/else",
        "body": [
            "while ${1:expression}:",
            "\t${2:pass}",
            "else:",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a while loop with else"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:it} in ${2:source}:",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a for loop"
    },
    "for/else": {
        "prefix": "for/else",
        "body": [
            "for ${1:target_list} in ${2:expression_list}:",
            "\t${3:pass}",
            "else:",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a for loop with else"
    },
    "try/except": {
        "prefix": "try/except",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:Exception}:",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a try/except statement"

    },

    "try": {
        "prefix": "try",
        "body": [
            "try:",
            "\t${1:pass}",
            "except Exception",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a try/except statement"
    },
    "try/finally": {
        "prefix": "try/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "finally:",
            "\t${2:pass}"
        ],
        "description": "Code snippet for a try/finally statement"
    },
    "try/except/else": {
        "prefix": "try/except/else",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/else statement"
    },
    "try/except/finally": {
        "prefix": "try/except/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "finally:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/finally statement"
    },
    "try/except/else/finally": {
        "prefix": "try/except/else/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}",
            "finally:",
            "\t${6:pass}"
        ],
        "description": "Code snippet for a try/except/else/finally statement"
    },
    "with": {
        "prefix": "with",
        "body": [
            "with ${1:expression} as ${2:target}:",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a with statement"
    },
    "def": {
        "prefix": "def",
        "body": [
            "def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a function definition"
    },
    "def(class method)": {
        "prefix": "def(class method)",
        "body": [
            "def ${1:funcname}(self, ${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a class method"
    },
    "def(static class method)": {
        "prefix": "def(static class method)",
        "body": [
            "@staticmethod",
            "def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a static class method"
    },
    "def(abstract class method)": {
        "prefix": "def(abstract class method)",
        "body": [
            "def ${1:funcname}(self, ${2:parameter_list}):",
            "\traise NotImplementedError"
        ],
        "description": "Code snippet for an abstract class method"
    },
    "class(object)": {
        "prefix": "class",
        "body": [
            "class ${1:classname}(${2:object}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a class definition"
    },
    "lambda": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:parameter_list}: ${2:expression}"
        ],
        "description": "Code snippet for a lambda statement"
    },
    "if(main)": {
        "prefix": "__main__",
        "body": [
            "if __name__ == \"__main__\":",
            "    ${1:pass}"
        ],
        "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
    },
    "async/def": {
        "prefix": "async/def",
        "body": [
            "async def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for an async statement"
    },
    "async/for": {
        "prefix": "async/for",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}"
        ],
        "description": "Code snippet for an async for statement"
    },
    "async/for/else": {
        "prefix": "async/for/else",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}",
            "else:",
            "\t${4:block}"
        ],
        "description": "Code snippet for an async for statement with else"
    },
    "async/with": {
        "prefix": "async/with",
        "body": [
            "async with ${1:expr} as ${2:var}:",
            "\t${3:block}"
        ],
        "description": "Code snippet for an async with statement"
    },
    "ipdb": {
        "prefix": "ipdb",
        "body": "import ipdb; ipdb.set_trace()",
        "description": "Code snippet for ipdb debug"
    },
    "pdb": {
        "prefix": "pdb",
        "body": "import pdb; pdb.set_trace()",
        "description": "Code snippet for pdb debug"
    },
    "pudb": {
        "prefix": "pudb",
        "body": "import pudb; pudb.set_trace()",
        "description": "Code snippet for pudb debug"
    },
    "model for tf1.0": {
        "prefix": "model1.0",
        "body": [
            "${1:model} = tf.keras.models.Sequential([",
            "   tf.keras.layers.Dense(32, activation=tf.nn.relu, input_shape=(4,)),",
            "   tf.keras.layers.Dense(16, activation=tf.nn.relu),",
            "   tf.keras.layers.Dense(3)",
            "])"
        ],
        "description": "Code snippet for an model 1.0"
    },
    "class for super": {
        "prefix": "class for super",
        "body": [
            "class ${1:classname}(${2:object}):",
            "\tdef __init__(self, ${3:var}):",
            "\t\tsuper().__init__(self)",
            "\t\tself.${3:var} = ${3:var}"
        ],
        "definition": "Code snippet for an super function"
    },
    "model for tf2.0": {
        "prefix": "model2.0",
        "body": [
            "class ${1:custom_model}(tf.keras.models.Model):",
            "    def __init__(self):",
            "        super().__init__(self)",
            "        self.conv1 = tf.keras.layers.Conv2D(32, 3, activation='relu')",
            "        self.flatten = tf.keras.layers.Flatten()",
            "        self.d1 = tf.keras.layers.Dense(128, activation='relu')",
            "        self.d2 = tf.keras.layers.Dense(10, activation='softmax')",
            "    def call(self, x):",
            "        x = self.conv1(x)",
            "        x = self.flatten(x)",
            "        x = self.d1(x)",
            "        return self.d2(x)",

            "model = ${1:custom_model}()"
        ],
        "description": "Code snippet for an model 2.0"
    },
    "tape": {
        "prefix": "tape",
        "body": [
            "x = tf.constant(3.0)",
            "with tf.GradientTape(persistent=True) as tape:",
            "    tape.watch(x)",
            "    y = x * x",
            "    z = y * y",
            "dz_dx = tape.gradient(z, x)",
            "dy_dx = tape.gradient(y, x)",
            "del tape"
        ],
        "description": "Code snippet for an GradTape"
    },
    "gradients": {
        "prefix": "gradients",
        "body": [
            "with tf.GradientTape() as tape:",
            "    gradients = tape.gradient(loss, model.trainable_variables)"
        ],
        "description": "Code snippet for an GradTape"
    },
    "import tf": {
        "prefix": "import tf",
        "body": [
            "import matplotlib.pyplot as plt",
            "import numpy as np",
            "import tensorflow as tf",
            "import tensorflow_probability.python as tfp",

            "tfd = tfp.distributions"

        ],
        "description": "Code snippet for import tf"
    },

    "import sqlalchemy": {
        "prefix": "import sqlalchemy",
        "body": [
            "",
            "from sqlalchemy import (Column, Date, DateTime, Integer, MetaData, String",
            "            Table, Time, and_, create_engine, event, pool, types)"
        ],
        "description": "Code snippet for import sqlalchemy"
    },
    "init": {
        "prefix": "init",
        "body": [
            "\tdef __init__(self,${1:var}):",
            "\t\tself.${1:var} = ${1:var}"
        ],
        "description": "Code snippet for init function"
    },
    "super": {
        "prefix": "super",
        "body": [
            "\t\tsuper().__init__(self)"
        ],
        "description": "Code snippet for super function"
    },

    "lambda func": {
        "prefix": "lambda func",
        "body": [
            "${1:funcname} = lambda x: "
        ],
        "description": "Code snippet for super function"
    },
    "import socks": {
        "prefix": "import socks",
        "body": [
            "import socket",
            "port_scanner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
            "try:",
            "    port_scanner.connect(('127.0.0.1', 8089))",
            "    import socks",
            "    socks.set_default_proxy(socks.SOCKS5, '127.0.0.1', 8089)",
            "    socket.socket = socks.socksocket",
            "except ConnectionRefusedError:",
            "    print('no port')"

        ],
        "description": "Code snippet for super function"
    },
    "fig": {
        "prefix": "fig",
        "body": [
            "fig, axs = plt.subplots(2, 2)"
        ],
        "description": "Code snippet for fig"
    },
    "train": {
        "prefix": "train",
        "body": [
            "optimizer = tf.keras.optimizers.Adam()",
            "",
            "@tf.function()",
            "def train_step(x, y):",
            "    with tf.GradientTape() as tape:",
            "        y_pred = model.call(x)",
            "        y_pred = tf.reduce_mean(y_pred, -1)",
            "        loss = tf.losses.hinge(y, y_pred)",
            "    gradients = tape.gradient(loss, model.trainable_variables)",
            "    optimizer.apply_gradients(zip(gradients, model.trainable_variables))",
            "    return loss"

        ],
        "description": "Code snippet for train"
    },
    "os": {
        "prefix": "os",
        "body": [
            "from os.path import basename, dirname, isdir, join"
        ],
        "description": "Code snippet for os"
    },
    "fp": {
        "prefix": "fp",
        "body": [
            "${1}_fp = join(dirname(__file__), '${2}'),"
        ],
        "description": "Code snippet for fp"
    },

    "read": {
        "prefix": "fp",
        "body": [
            "${1}_fp = join(dirname(__file__), '${2}'),"
        ],
        "description": "Code snippet for fp"
    },
    "open": {
        "prefix": "open",
        "body": [
            "open(${1}_fp,'r').read()"
        ],
        "description": "Code snippet for super function"
    },
    "dataset": {
        "prefix": "dataset",
        "body": [
            "def load_data(fp):",
            "    dataset = tf.data.TextLineDataset(fp)",
            "    dataset = dataset.skip(1)",
            "",
            "    def split(line):",
            "        line = line.numpy().decode('utf-8').split(',')",
            "        line = tf.strings.to_number(line)",
            "        return line[:-1], int(line[-1])",
            "",
            "    def in_out(line):",
            "        return tf.py_function(split, inp=[line], Tout=[tf.float32, tf.float32])",
            "",
            "    dataset = dataset.map(in_out)",
            "    return dataset"
        ],
        "description": "Code snippet for wrapper"
    },

    "decode_img": {
        "prefix": "decode_img",
        "body": [
            "def decode_img(img):",
            "   img = tf.io.read_file(img)",
            "   img = tf.image.decode_jpeg(img, channels=3)",
            "   img = tf.image.convert_image_dtype(img, tf.float32)",
            "   return tf.image.resize(img, size=[100, 50])"
        ],
        "description": "Code snippet for img"
    },
    "functools": {
        "prefix": "import functools",
        "body": [
            "import functools",
            "def log(text):",
            "    def decorator(func):",
            "         @functools.wraps(func)",
            "         def wrapper(*args, **kw):",
            "             print('%s %s():' % (text, func.__name__))",
            "             return func(*args, **kw)",
            "         return wrapper",
            "     return decorator"
        ],
        "description": "Code snippet for functools"
    },
    "compile": {
        "prefix": "compile",
        "body": [
            "metrics = [tf.metrics.SparseCategoricalCrossentropy(name='accuracy')]",
            "model.compile(optimizer=tf.optimizers.Adam(lr=1e-3),",
            "              loss=tf.losses.SparseCategoricalCrossentropy(),",
            "              metrics=metrics)"
        ],

        "description": "Code snippet for compile"
    },

    "tf.keras.Model": {
        "prefix": "model",
        "body": [
            "class Dense(tf.keras.Model):",
            "    def __init__(self, input_features, output_features, name=None):",
            "        super().__init__(name=name)",
            "        self.w = tf.Variable(tf.random.normal(",
            "            (input_features, output_features)),",
            "                             name='w')",
            "        self.b = tf.Variable(tf.zeros(output_features), name='b')",
            "",
            "    def __call__(self, x):",
            "        y = tf.matmul(x, self.w) + self.b",
            "        return tf.nn.relu(y)"
        ],
        "description": "Code snippet for Module"
    },

    "dfs": {
        "prefix": "dfs",
        "body": [
            "star_pos = []",
            "stack = list()",
            "stack.append(star_pos)",
            "for _ in range(100):",
            "    if stack:",
            "        sp = stack.pop()",
            "        if len(sp) == 10:",
            "            print(sp)",
            "            continue",
            "        for po in range(25):",
            "            pass",
            "    else:",
            "        break"
        ],
        "description": "Code snippet for Module"

    },
    "proxies": {
        "prefix": "proxies",
        "body": [
            "proxies = {'http': 'http://127.0.0.1:8090', 'https': 'http://127.0.0.1:8090'}"
        ],
        "description": "Code snippet for proxies"
    },
    "headers": {
        "prefix": "headers",
        "body": [
            "headers = {",
            "    'User-Agent':",
            "    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3987.149 Safari/537.36',",
            "    'Content-Length': 20",
            "    'Content-Type': 'application/json'",
            "    'Accept-Language':",
            "    'zh-TW,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6,und;q=0.5'",
            "}"
        ],
        "description": "Code snippet for headers"
    },
    "post": {
        "prefix": "post",
        "body": [
            "res = requests.post('${1}',",
            "                    data=data,",
            "                    headers=headers,",
            "                    proxies=proxies,",
            "                    verify=False).text"
        ],
        "description": "Code snippet for post"
    }

}
