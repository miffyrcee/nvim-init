# cs.snippets
# ===========
#
# Standard C-Sharp snippets for snipmate.
#
# Largely ported over from Visual Studio 2010 snippets plus
# a few snippets from Resharper plus a few widely known snippets.
#
# Most snippets on elements (i.e. classes, properties)
# follow suffix conventions. The order of suffixes to a snippet
# is fixed.
#
# Snippet Suffix Order
# --------------------
# 1. Access Modifiers
# 2. Class Modifiers
#
# Access Modifier Suffix Table
# ----------------------------
# + = public
# & = internal
# | = protected
# - = private
#
# Example: `cls&` expands to `internal class $1`.
# Access modifiers might be doubled to indicate
# different modifiers for get/set on properties.
# Example: `pb+-` expands to `public bool $1 { get; private set; }`
#
# Class Modifier Table
# --------------------
# ^ = static
# % = abstract
#
# Example: `cls|%` expands to `protected abstract class $1`
#
# On method and property snippets, you can directly set
# one of the common types int, string and bool, if desired,
# just by appending the type modifier.
#
# Type Modifier Table
# -------------------
# i = integer
# s = string
# b = bool
#
# Example: `pi+&` expands to `public int $1 { get; internal set; }`
#
# I'll most propably add more stuff in here like
# * List/Array constructio
# * Mostly used generics
# * Linq
# * Funcs, Actions, Predicates
# * Lambda
# * Events
#
# Feedback is welcome!
#
# Main
snippet sim
	${1:public} static int Main(string[] args)
	{
		${0}
		return 0;
	}
endsnippet
snippet simc
	public class Application
	{
		${1:public} static int Main(string[] args)
		{
			${0}
			return 0;
		}
	}
endsnippet
snippet svm
	${1:public} static void Main(string[] args)
	{
		${0}
	}
# if condition
endsnippet
snippet if
	if (${1:true})
	{
		${0:${VISUAL}}
	}
endsnippet
snippet el
	else
	{
		${0:${VISUAL}}
	}
endsnippet
snippet ifs
	if (${1})
		${0:${VISUAL}}
# ternary conditional
endsnippet
snippet t
	${1} ? ${2} : ${0}
endsnippet
snippet ?
	${1} ? ${2} : ${0}
# do while loop
endsnippet
snippet do
	do
	{
		${0:${VISUAL}}
	} while (${1:true});
# while loop
endsnippet
snippet wh
	while (${1:true})
	{
		${0:${VISUAL}}
	}
# for loop
endsnippet
snippet for
	for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})
	{
		${0}
	}
endsnippet
snippet forr
	for (int ${1:i} = ${2:length}; $1 >= 0; $1--)
	{
		${0}
	}
# foreach
endsnippet
snippet fore
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}
endsnippet
snippet foreach
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}
endsnippet
snippet each
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}
# interfaces
endsnippet
snippet interface
	public interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet if+
	public interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# class bodies
endsnippet
snippet class
	public class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls
	${2:public} class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls+
	public class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls+^
	public static class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls&
	internal class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls&^
	internal static class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls|
	protected class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls|%
	protected abstract class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# constructor
endsnippet
snippet ctor
	public ${1:`vim_snippets#Filename()`}()
	{
		${0}
	}
# properties - auto properties by default.
# default type is int with layout get / set.
endsnippet
snippet prop
	${1:public} ${2:int} ${3} { get; set; }
endsnippet
snippet p
	${1:public} ${2:int} ${3} { get; set; }
endsnippet
snippet p+
	public ${1:int} ${2} { get; set; }
endsnippet
snippet p+&
	public ${1:int} ${2} { get; internal set; }
endsnippet
snippet p+|
	public ${1:int} ${2} { get; protected set; }
endsnippet
snippet p+-
	public ${1:int} ${2} { get; private set; }
endsnippet
snippet p&
	internal ${1:int} ${2} { get; set; }
endsnippet
snippet p&|
	internal ${1:int} ${2} { get; protected set; }
endsnippet
snippet p&-
	internal ${1:int} ${2} { get; private set; }
endsnippet
snippet p|
	protected ${1:int} ${2} { get; set; }
endsnippet
snippet p|-
	protected ${1:int} ${2} { get; private set; }
endsnippet
snippet p-
	private ${1:int} ${2} { get; set; }
# property - bool
endsnippet
snippet pi
	${1:public} int ${2} { get; set; }
endsnippet
snippet pi+
	public int ${1} { get; set; }
endsnippet
snippet pi+&
	public int ${1} { get; internal set; }
endsnippet
snippet pi+|
	public int ${1} { get; protected set; }
endsnippet
snippet pi+-
	public int ${1} { get; private set; }
endsnippet
snippet pi&
	internal int ${1} { get; set; }
endsnippet
snippet pi&|
	internal int ${1} { get; protected set; }
endsnippet
snippet pi&-
	internal int ${1} { get; private set; }
endsnippet
snippet pi|
	protected int ${1} { get; set; }
endsnippet
snippet pi|-
	protected int ${1} { get; private set; }
endsnippet
snippet pi-
	private int ${1} { get; set; }
# property - bool
endsnippet
snippet pb
	${1:public} bool ${2} { get; set; }
endsnippet
snippet pb+
	public bool ${1} { get; set; }
endsnippet
snippet pb+&
	public bool ${1} { get; internal set; }
endsnippet
snippet pb+|
	public bool ${1} { get; protected set; }
endsnippet
snippet pb+-
	public bool ${1} { get; private set; }
endsnippet
snippet pb&
	internal bool ${1} { get; set; }
endsnippet
snippet pb&|
	internal bool ${1} { get; protected set; }
endsnippet
snippet pb&-
	internal bool ${1} { get; private set; }
endsnippet
snippet pb|
	protected bool ${1} { get; set; }
endsnippet
snippet pb|-
	protected bool ${1} { get; private set; }
endsnippet
snippet pb-
	private bool ${1} { get; set; }
# property - string
endsnippet
snippet ps
	${1:public} string ${2} { get; set; }
endsnippet
snippet ps+
	public string ${1} { get; set; }
endsnippet
snippet ps+&
	public string ${1} { get; internal set; }
endsnippet
snippet ps+|
	public string ${1} { get; protected set; }
endsnippet
snippet ps+-
	public string ${1} { get; private set; }
endsnippet
snippet ps&
	internal string ${1} { get; set; }
endsnippet
snippet ps&|
	internal string ${1} { get; protected set; }
endsnippet
snippet ps&-
	internal string ${1} { get; private set; }
endsnippet
snippet ps|
	protected string ${1} { get; set; }
endsnippet
snippet ps|-
	protected string ${1} { get; private set; }
endsnippet
snippet ps-
	private string ${1} { get; set; }
# members - void
endsnippet
snippet m
	${1:public} ${2:void} ${3}(${4})
	{
		${0}
	}
endsnippet
snippet m+
	public ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet
snippet m&
	internal ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet
snippet m|
	protected ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet
snippet m-
	private ${1:void} ${2}(${3})
	{
		${0}
	}
# members - int
endsnippet
snippet mi
	${1:public} int ${2}(${3})
	{
		${0:return 0;}
	}
endsnippet
snippet mi+
	public int ${1}(${2})
	{
		${0:return 0;}
	}
endsnippet
snippet mi&
	internal int ${1}(${2})
	{
		${0:return 0;}
	}
endsnippet
snippet mi|
	protected int ${1}(${2})
	{
		${0:return 0;}
	}
endsnippet
snippet mi-
	private int ${1}(${2})
	{
		${0:return 0;}
	}
# members - bool
endsnippet
snippet mb
	${1:public} bool ${2}(${3})
	{
		${0:return false;}
	}
endsnippet
snippet mb+
	public bool ${1}(${2})
	{
		${0:return false;}
	}
endsnippet
snippet mb&
	internal bool ${1}(${2})
	{
		${0:return false;}
	}
endsnippet
snippet mb|
	protected bool ${1}(${2})
	{
		${0:return false;}
	}
endsnippet
snippet mb-
	private bool ${1}(${2})
	{
		${0:return false;}
	}
# members - string
endsnippet
snippet ms
	${1:public} string ${2}(${3})
	{
		${0:return "";}
	}
endsnippet
snippet ms+
	public string ${1}(${2})
	{
		${0:return "";}
	}
endsnippet
snippet ms&
	internal string ${1}(${2})
	{
		${0:return "";}
	}
endsnippet
snippet ms|
	protected string ${1:}(${2:})
	{
		${0:return "";}
	}
endsnippet
snippet ms-
	private string ${1}(${2})
	{
		${0:return "";}
	}
# structure
endsnippet
snippet struct
	public struct ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# enumeration
endsnippet
snippet enum
	enum ${1}
	{
		${0}
	}

endsnippet
snippet enum+
	public enum ${1}
	{
		${0}
	}
# preprocessor directives
endsnippet
snippet #if
	#if
		${0}
	#endif
# inline xml documentation
endsnippet
snippet ///
	/// <summary>
	/// ${0}
	/// </summary>
endsnippet
snippet <p
	<param name="${1}">${2:$1}</param>
endsnippet
snippet <ex
	<exception cref="${1:System.Exception}">${2}</exception>
endsnippet
snippet <r
	<returns>${1}</returns>
endsnippet
snippet <s
	<see cref="${1}"/>
endsnippet
snippet <rem
	<remarks>${1}</remarks>
endsnippet
snippet <c
	<code>${1}</code>

endsnippet
snippet cw
	Console.WriteLine(${1});

# equals override
endsnippet
snippet eq
	public override bool Equals(object obj)
	{
		if (obj == null || GetType() != obj.GetType())
		{
			return false;
		}
		${0:throw new NotImplementedException();}
		return base.Equals(obj);
	}
# exception
endsnippet
snippet exc
	public class ${1:MyException} : ${2:Exception}
	{
		public $1() { }
		public $1(string message) : base(message) { }
		public $1(string message, Exception inner) : base(message, inner) { }
		protected $1(
			System.Runtime.Serialization.SerializationInfo info,
			System.Runtime.Serialization.StreamingContext context)
				: base(info, context) { }
	}
# indexer
endsnippet
snippet index
	public ${1:object} this[${2:int} index]
	{
		get { ${0} }
		set { ${0} }
	}
# eventhandler
endsnippet
snippet inv
	EventHandler temp = ${1:MyEvent};
	if (${2:temp} != null)
	{
		$2();
	}
# lock
endsnippet
snippet lock
	lock (${1:this})
	{
		${0}
	}
# namespace
endsnippet
snippet namespace
	namespace ${1:MyNamespace}
	{
		${0}
	}
# property
endsnippet
snippet propr
	public ${1:int} ${2:MyProperty} { get; set; }
endsnippet
snippet propf
	private ${1:int} ${2:myVar};
	public $1 ${3:MyProperty}
	{
		get { return $2; }
		set { $2 = value; }
	}
endsnippet
snippet propg
	public ${1:int} ${2:MyProperty} { get; private set; }
# switch
endsnippet
snippet switch
	switch (${1:switch_on})
	{
		${0}
		default:
	}
# try
endsnippet
snippet try
	try
	{
		${0:${VISUAL}}
	}
	catch (${1:System.Exception})
	{
		throw;
	}
endsnippet
snippet tryf
	try
	{
		${0:${VISUAL}}
	}
	finally
	{
		${1}
	}
# using
endsnippet
snippet usi
	using (${1:resource})
	{
		${0}
	}
endsnippet
