## Access Modifiers
snippet po
	protected ${0}
endsnippet
snippet pu
	public ${0}
endsnippet
snippet pr
	private ${0}
##
## Annotations
endsnippet
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${0} }
endsnippet
snippet mm
	@ManyToMany
	${0}
endsnippet
snippet mo
	@ManyToOne
	${0}
endsnippet
snippet om
	@OneToMany${1:(cascade=CascadeType.ALL)}
	${0}
endsnippet
snippet oo
	@OneToOne
	${1}
##
## Basic Java packages and import
endsnippet
snippet im
	import ${0}
endsnippet
snippet j.b
	java.beans.
endsnippet
snippet j.i
	java.io.
endsnippet
snippet j.m
	java.math.
endsnippet
snippet j.n
	java.net.
endsnippet
snippet j.u
	java.util.
##
## Class
endsnippet
snippet cl
	class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
endsnippet
snippet pcl
	public class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
endsnippet
snippet in
	interface ${1:`vim_snippets#Filename("$1", "untitled")`} ${2:extends Parent}
endsnippet
snippet tc
	public class ${1:`vim_snippets#Filename("$1")`} extends ${0:TestCase}
##
## Class Enhancements
endsnippet
snippet ext
	extends ${0}
endsnippet
snippet imp
	implements ${0}
##
## Comments
endsnippet
snippet /*
	/*
	 * ${0}
	 */
##
## Constants
endsnippet
snippet co
	static public final ${1:String} ${2:var} = ${3};
endsnippet
snippet cos
	static public final String ${1:var} = "${2}";
##
## Control Statements
endsnippet
snippet case
	case ${1}:
		${0}
endsnippet
snippet def
	default:
		${0}
endsnippet
snippet el
	else
endsnippet
snippet eif
	else if (${1}) ${0}
endsnippet
snippet if
	if (${1}) ${0}
endsnippet
snippet sw
	switch (${1}) {
		${0}
	}
##
## Create a Method
endsnippet
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }
##
## Create a Variable
endsnippet
snippet v
	${1:String} ${2:var}${3: = null}${4};
##
## Declaration for ArrayList
endsnippet
snippet d.al
	List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
## Declaration for HashMap
endsnippet
snippet d.hm
	Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
## Declaration for HashSet
endsnippet
snippet d.hs
	Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
## Declaration for Stack
endsnippet
snippet d.st
	Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
##
## Singleton Pattern
endsnippet
snippet singlet
	private static class Holder {
		private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
	}

	private $1() { }

	public static $1 getInstance() {
		return Holder.INSTANCE;
	}
##
## Enhancements to Methods, variables, classes, etc.
endsnippet
snippet ab
	abstract ${0}
endsnippet
snippet fi
	final ${0}
endsnippet
snippet st
	static ${0}
endsnippet
snippet sy
	synchronized ${0}
##
## Error Methods
endsnippet
snippet err
	System.err.print("${0:Message}");
endsnippet
snippet errf
	System.err.printf("${1:Message}", ${0:exception});
endsnippet
snippet errln
	System.err.println("${0:Message}");
##
## Exception Handling
endsnippet
snippet as
	assert ${1:test} : "${2:Failure message}";
endsnippet
snippet ae
	assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet aae
	assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
endsnippet
snippet af
	assertFalse("${1:Failure message}", ${2:condition});
endsnippet
snippet at
	assertTrue("${1:Failure message}", ${2:condition});
endsnippet
snippet an
	assertNull("${1:Failure message}", ${2:object});
endsnippet
snippet ann
	assertNotNull("${1:Failure message}", ${2:object});
endsnippet
snippet ass
	assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet asns
	assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet fa
	fail("${1:Failure message}");
endsnippet
snippet ca
	catch(${1:Exception} ${2:e}) ${0}
endsnippet
snippet thr
	throw ${0}
endsnippet
snippet ths
	throws ${0}
endsnippet
snippet try
	try {
		${0:${VISUAL}}
	} catch(${1:Exception} ${2:e}) {
	}
endsnippet
snippet tryf
	try {
		${0:${VISUAL}}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
##
## Find Methods
endsnippet
snippet findall
	List<${1:listName}> ${2:items} = ${1}.findAll();
endsnippet
snippet findbyid
	${1:var} ${2:item} = ${1}.findById(${3});
##
## Javadocs
endsnippet
snippet /**
	/**
	 * ${0}
	 */
endsnippet
snippet @au
	@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
endsnippet
snippet @br
	@brief ${0:Description}
endsnippet
snippet @fi
	@file ${0:`vim_snippets#Filename("$1")`}.java
endsnippet
snippet @pa
	@param ${0:param}
endsnippet
snippet @re
	@return ${0:param}
##
## Logger Methods
endsnippet
snippet debug
	Logger.debug(${1:param});
endsnippet
snippet error
	Logger.error(${1:param});
endsnippet
snippet info
	Logger.info(${1:param});
endsnippet
snippet warn
	Logger.warn(${1:param});
##
## Loops
endsnippet
snippet enfor
	for (${1} : ${2}) ${0}
endsnippet
snippet for
	for (${1}; ${2}; ${3}) ${0}
endsnippet
snippet wh
	while (${1}) ${0}
##
## Main method
endsnippet
snippet psvm
	public static void main (String[] args) {
		${0}
	}
endsnippet
snippet main
	public static void main (String[] args) {
		${0}
	}
##
## Print Methods
endsnippet
snippet sout
	System.out.println(${0});
endsnippet
snippet serr
	System.err.println(${0});
endsnippet
snippet print
	System.out.print("${0:Message}");
endsnippet
snippet printf
	System.out.printf("${1:Message}", ${0:args});
endsnippet
snippet println
	System.out.println(${0});
endsnippet
snippet printlna
	System.out.println(Arrays.toString(${0}));
##
## Render Methods
endsnippet
snippet ren
	render(${1:param});
endsnippet
snippet rena
	renderArgs.put("${1}", ${2});
endsnippet
snippet renb
	renderBinary(${1:param});
endsnippet
snippet renj
	renderJSON(${1:param});
endsnippet
snippet renx
	renderXml(${1:param});
##
## Setter and Getter Methods
endsnippet
snippet set
	${1:public} void set${3:}(${2:String} ${0:}){
		this.$4 = $4;
	}
endsnippet
snippet get
	${1:public} ${2:String} get${3:}(){
		return this.${0:};
	}
##
## Terminate Methods or Loops
endsnippet
snippet re
	return ${0}
endsnippet
snippet br
	break;
##
## Test Methods
endsnippet
snippet t
	public void test${1:Name}() throws Exception {
		${0}
	}
endsnippet
snippet test
	@Test
	public void test${1:Name}() throws Exception {
		${0}
	}
##
## Utils
endsnippet
snippet Sc
	Scanner
##
## Miscellaneous
endsnippet
snippet action
	public static void ${1:index}(${2:args}) { ${0} }
endsnippet
snippet rnf
	notFound(${1:param});
endsnippet
snippet rnfin
	notFoundIfNull(${1:param});
endsnippet
snippet rr
	redirect(${1:param});
endsnippet
snippet ru
	unauthorized(${1:param});
endsnippet
snippet unless
	(unless=${1:param});
endsnippet
