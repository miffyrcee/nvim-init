snippet art
	assert_redirected_to ${1:action}: '${2:index}'
endsnippet
snippet artnp
	assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${0:@$2})
endsnippet
snippet artnpp
	assert_redirected_to ${1:parent}_${2:child}_path(${0:@$1})
endsnippet
snippet artp
	assert_redirected_to ${1:model}_path(${0:@$1})
endsnippet
snippet artpp
	assert_redirected_to ${0:model}s_path
endsnippet
snippet asd
	assert_difference '${1:Model}.${2:count}', ${3:1} do
		${0}
	end
endsnippet
snippet asnd
	assert_no_difference '${1:Model}.${2:count}' do
		${0}
	end
endsnippet
snippet asre
	assert_response :${1:success}, @response.body
endsnippet
snippet asrj
	assert_rjs :${1:replace}, '${0:dom id}'
endsnippet
snippet ass assert_select(..)
	assert_select '${1:path}', ${2:text}: '${3:inner_html}' ${4:do}
		${0}
	end
endsnippet
snippet ba
	before_action :${0:method}
endsnippet
snippet bf
	before_filter :${0:method}
endsnippet
snippet bt
	belongs_to :${0:association}
endsnippet
snippet btp
	belongs_to :${1:association}, polymorphic: true
endsnippet
snippet crw
	cattr_accessor :${0:attr_names}
endsnippet
snippet defcreate
	def create
		@${1:model_class_name} = ${2:ModelClassName}.new($1_params)

		respond_to do |format|
			if @$1.save
				flash[:notice] = '$2 was successfully created.'
				format.html { redirect_to(@$1) }
				format.json  { render json: @$1, status: :created, location: @$1 }
			else
				format.html { render action: 'new' }
				format.json  { render json: @$1.errors, status: :unprocessable_entity }
			end
		end
	end
endsnippet
snippet defdestroy
	def destroy
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
		@$1.destroy

		respond_to do |format|
			format.html { redirect_to($1s_url) }
			format.json  { head :ok }
		end
	end
endsnippet
snippet defedit
	def edit
		@${1:model_class_name} = ${0:ModelClassName}.find(params[:id])
	end
endsnippet
snippet defindex
	def index
		@${1:model_class_name} = ${2:ModelClassName}.all

		respond_to do |format|
			format.html # index.html.erb
			format.json  { render json: @$1s }
		end
	end
endsnippet
snippet defnew
	def new
		@${1:model_class_name} = ${2:ModelClassName}.new

		respond_to do |format|
			format.html # new.html.erb
			format.json  { render json: @$1 }
		end
	end
endsnippet
snippet defshow
	def show
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])

		respond_to do |format|
			format.html # show.html.erb
			format.json  { render json: @$1 }
		end
	end
endsnippet
snippet defupdate
	def update
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])

		respond_to do |format|
			if @$1.update($1_params)
				flash[:notice] = '$2 was successfully updated.'
				format.html { redirect_to(@$1) }
				format.json  { head :ok }
			else
				format.html { render action: 'edit' }
				format.json  { render json: @$1.errors, status: :unprocessable_entity }
			end
		end
	end
endsnippet
snippet defparams
	def ${1:model_class_name}_params
		params.require(:$1).permit()
	end
endsnippet
snippet dele delegate .. to
	delegate :${1:methods}, to: :${0:object}
endsnippet
snippet dele delegate .. to .. prefix .. allow_nil
	delegate :${1:methods}, to: :${2:object}, prefix: :${3:prefix}, allow_nil: ${0:allow_nil}
endsnippet
snippet amc
	alias_method_chain :${1:method_name}, :${0:feature}
endsnippet
snippet flash
	flash[:${1:notice}] = '${0}'
endsnippet
snippet habtm
	has_and_belongs_to_many :${1:object}, join_table: '${2:table_name}', foreign_key: '${3}_id'
endsnippet
snippet hm
	has_many :${0:object}
endsnippet
snippet hmd
	has_many :${1:other}s, class_name: '${2:$1}', foreign_key: '${3:$1}_id', dependent: :destroy
endsnippet
snippet hmt
	has_many :${1:object}, through: :${0:object}
endsnippet
snippet ho
	has_one :${0:object}
endsnippet
snippet hod
	has_one :${1:object}, dependent: :${0:destroy}
endsnippet
snippet i18
	I18n.t('${1:type.key}')
endsnippet
snippet ist
	<%= image_submit_tag('${1:agree.png}', id: '${2:id}'${0}) %>
endsnippet
snippet log
	Rails.logger.${1:debug} ${0}
endsnippet
snippet log2
	RAILS_DEFAULT_LOGGER.${1:debug} ${0}
endsnippet
snippet logd
	logger.debug { '${1:message}' }
endsnippet
snippet loge
	logger.error { '${1:message}' }
endsnippet
snippet logf
	logger.fatal { '${1:message}' }
endsnippet
snippet logi
	logger.info { '${1:message}' }
endsnippet
snippet logw
	logger.warn { '${1:message}' }
endsnippet
snippet mapc
	${1:map}.${2:connect} '${0:controller/:action/:id}'
endsnippet
snippet mapca
	${1:map}.catch_all '*${2:anything}', controller: '${3:default}', action: '${4:error}'
endsnippet
snippet mapr
	${1:map}.resource :${0:resource}
endsnippet
snippet maprs
	${1:map}.resources :${0:resource}
endsnippet
snippet mapwo
	${1:map}.with_options ${2:controller}: '${3:thing}' do |$3|
		${0}
	end

###############################
#   model callback snippets   #
###############################

# before callback
endsnippet
snippet mbv
	before_validation :${0:method}
endsnippet
snippet mbc
	before_create :${0:method}
endsnippet
snippet mbu
	before_update :${0:method}
endsnippet
snippet mbs
	before_save :${0:method}
endsnippet
snippet mbd
	before_destroy :${0:method}

# after callback
endsnippet
snippet mav
	after_validation :${0:method}
endsnippet
snippet maf
	after_find :${0:method}
endsnippet
snippet mat
	after_touch :${0:method}
endsnippet
snippet macr
	after_create :${0:method}
endsnippet
snippet mau
	after_update :${0:method}
endsnippet
snippet mas
	after_save :${0:method}
endsnippet
snippet mad
	after_destroy :${0:method}

# around callback
endsnippet
snippet marc
	around_create :${0:method}
endsnippet
snippet maru
	around_update :${0:method}
endsnippet
snippet mars
	around_save :${0:method}
endsnippet
snippet mard
	around_destroy :${0:method}

endsnippet
snippet mcht
	change_table :${1:table_name} do |t|
		${0}
	end
endsnippet
snippet mp
	map(&:${0:id})
endsnippet
snippet mrw
	mattr_accessor :${0:attr_names}
endsnippet
snippet oa
	order('${0:field}')
endsnippet
snippet od
	order('${0:field} DESC')
endsnippet
snippet pa
	params[:${1:id}]
endsnippet
snippet ra
	render action: '${0:action}'
endsnippet
snippet ral
	render action: '${1:action}', layout: '${0:layoutname}'
endsnippet
snippet rest
	respond_to do |format|
		format.${1:html} { ${0} }
	end
endsnippet
snippet rf
	render file: '${0:filepath}'
endsnippet
snippet rfu
	render file: '${1:filepath}', use_full_path: ${0:false}
endsnippet
snippet ri
	render inline: "${0:<%= 'hello' %>}"
endsnippet
snippet ril
	render inline: "${1:<%= 'hello' %>}", locals: { ${2:name}: '${3:value}'${0} }
endsnippet
snippet rit
	render inline: "${1:<%= 'hello' %>}", type: ${0::rxml}
endsnippet
snippet rjson
	render json: '${0:text to render}'
endsnippet
snippet rl
	render layout: '${0:layoutname}'
endsnippet
snippet rn
	render nothing: ${0:true}
endsnippet
snippet rns
	render nothing: ${1:true}, status: ${0:401}
endsnippet
snippet rp
	render partial: '${0:item}'
endsnippet
snippet rpc
	render partial: '${1:item}', collection: ${0:@$1s}
endsnippet
snippet rpl
	render partial: '${1:item}', locals: { ${2:$1}: ${0:@$1} }
endsnippet
snippet rpo
	render partial: '${1:item}', object: ${0:@$1}
endsnippet
snippet rps
	render partial: '${1:item}', status: ${0:500}
endsnippet
snippet rt
	render text: '${0:text to render}'
endsnippet
snippet rtl
	render text: '${1:text to render}', layout: '${0:layoutname}'
endsnippet
snippet rtlt
	render text: '${1:text to render}', layout: ${0:true}
endsnippet
snippet rts
	render text: '${1:text to render}', status: ${0:401}
endsnippet
snippet ru
	render :update do |${1:page}|
		$1.${0}
	end
endsnippet
snippet rxml
	render xml: '${0:text to render}'
endsnippet
snippet sc
	scope :${1:name}, -> { where(${2:field}: ${0:value}) }
endsnippet
snippet sl
	scope :${1:name}, lambda do |${2:value}|
		where('${3:field = ?}', ${0:value})
	end
endsnippet
snippet sha1
	Digest::SHA1.hexdigest(${0:string})
endsnippet
snippet sweeper
	class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper
		observe $1

		def after_save(${0:model_class_name})
			expire_cache($2)
		end

		def after_destroy($2)
			expire_cache($2)
		end

		def expire_cache($2)
			expire_page
		end
	end
endsnippet
snippet va validates_associated
	validates_associated :${0:attribute}
endsnippet
snippet va validates .., acceptance: true
	validates :${0:terms}, acceptance: true
endsnippet
snippet vc
	validates :${0:attribute}, confirmation: true
endsnippet
snippet ve
	validates :${1:attribute}, exclusion: { in: ${0:%w( mov avi )} }
endsnippet
snippet vf
	validates :${1:attribute}, format: { with: /${0:regex}/ }
endsnippet
snippet vi
	validates :${1:attribute}, inclusion: { in: %w(${0: mov avi }) }
endsnippet
snippet vl
	validates :${1:attribute}, length: { in: ${2:3}..${0:20} }
endsnippet
snippet vn
	validates :${0:attribute}, numericality: true
endsnippet
snippet vp
	validates :${0:attribute}, presence: true
endsnippet
snippet vu
	validates :${0:attribute}, uniqueness: true
endsnippet
snippet format
	format.${1:js|xml|html} { ${0} }
endsnippet
snippet wc
	where(${1:'conditions'}${0:, bind_var})
endsnippet
snippet wf
	where(${1:field}: ${0:value})
endsnippet
snippet xdelete
	xhr :delete, :${1:destroy}, id: ${2:1}
endsnippet
snippet xget
	xhr :get, :${1:show}, id: ${2:1}
endsnippet
snippet xpost
	xhr :post, :${1:create}, ${2:object}: ${3:object}
endsnippet
snippet xput
	xhr :put, :${1:update}, id: ${2:1}, ${3:object}: ${4:object}
endsnippet
snippet test
	test '${1:should do something}' do
		${0}
	end
###########################
#   migrations snippets   #
###########################
endsnippet
snippet mac
	add_column :${1:table_name}, :${2:column_name}, :${0:data_type}
endsnippet
snippet mai
	add_index :${1:table_name}, :${0:column_name}
endsnippet
snippet mrc
	remove_column :${1:table_name}, :${0:column_name}
endsnippet
snippet mrnc
	rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}
endsnippet
snippet mcc
	change_column :${1:table}, :${2:column}, :${0:type}
endsnippet
snippet mnc
	t.${1:string} :${2:title}${3:, null: false}
endsnippet
snippet mct
	create_table :${1:table_name} do |t|
		${0}
	end
endsnippet
snippet mrev reversible do |dir| ... dir.up .. dir.down .. end
	reversible do |dir|
		dir.up do
			${0}
		end

		dir.down do
		end
	end
endsnippet
snippet cmm class Migration... < ApplicationModel .. self.table_name .. end
	class Migration${1:class_name} < ApplicationRecord
		self.table_name = :${2:model_name}s
	end
endsnippet
snippet migration class .. < ActiveRecord::Migration .. def up .. def down .. end
	class `substitute( substitute(vim_snippets#Filename(), '^\d\+_', '',''), '\(_\|^\)\(.\)', '\u\2', 'g')` < ActiveRecord::Migration
		def up
			${0}
		end

		def down
		end
	end
endsnippet
snippet migration class .. < ActiveRecord::Migration .. def change .. end
	class `substitute( substitute(vim_snippets#Filename(), '^\d\+_', '',''), '\(_\|^\)\(.\)', '\u\2', 'g')` < ActiveRecord::Migration
		def change
			${0}
		end
	end
endsnippet
snippet trc
	t.remove :${0:column}
endsnippet
snippet tre
	t.rename :${1:old_column_name}, :${2:new_column_name}
	${0}
endsnippet
snippet tref
	t.references :${0:model}
endsnippet
snippet tcb
	t.boolean :${1:title}
	${0}
endsnippet
snippet tcbi
	t.binary :${1:title}, limit: ${2:2}.megabytes
	${0}
endsnippet
snippet tcd
	t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}
	${0}
endsnippet
snippet tcda
	t.date :${1:title}
	${0}
endsnippet
snippet tcdt
	t.datetime :${1:title}
	${0}
endsnippet
snippet tcf
	t.float :${1:title}
	${0}
endsnippet
snippet tch
	t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}
	${0}
endsnippet
snippet tci
	t.integer :${1:title}
	${0}
endsnippet
snippet tcl
	t.integer :lock_version, null: false, default: 0
	${0}
endsnippet
snippet tcr
	t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }
	${0}
endsnippet
snippet tcs
	t.string :${1:title}
	${0}
endsnippet
snippet tct
	t.text :${1:title}
	${0}
endsnippet
snippet tcti
	t.time :${1:title}
	${0}
endsnippet
snippet tcts
	t.timestamp :${1:title}
	${0}
endsnippet
snippet tctss
	t.timestamps
	${0}
##########################
#     Rspec snippets     #
##########################
#ShouldaMatchers#ActionController
endsnippet
snippet isfp
	it { should filter_param :${0:key} }
endsnippet
snippet isrt
	it { should redirect_to ${0:url} }
endsnippet
snippet isrtp
	it { should render_template ${0} }
endsnippet
snippet isrwl
	it { should render_with_layout ${0} }
endsnippet
snippet isrf
	it { should rescue_from ${0:exception} }
endsnippet
snippet isrw
	it { should respond_with ${0:status} }
endsnippet
snippet isr
	it { should route(:${1:method}, '${0:path}') }
endsnippet
snippet isss
	it { should set_session :${0:key} }
endsnippet
snippet issf
	it { should set_the_flash('${0}') }
#ShouldaMatchers#ActiveModel
endsnippet
snippet isama
	it { should allow_mass_assignment_of :${0} }
endsnippet
snippet isav
	it { should allow_value(${1}).for :${0} }
endsnippet
snippet isee
	it { should ensure_exclusion_of :${0} }
endsnippet
snippet isei
	it { should ensure_inclusion_of :${0} }
endsnippet
snippet isel
	it { should ensure_length_of :${0} }
endsnippet
snippet isva
	it { should validate_acceptance_of :${0} }
endsnippet
snippet isvc
	it { should validate_confirmation_of :${0} }
endsnippet
snippet isvn
	it { should validate_numericality_of :${0} }
endsnippet
snippet isvp
	it { should validate_presence_of :${0} }
endsnippet
snippet isvu
	it { should validate_uniqueness_of :${0} }
#ShouldaMatchers#ActiveRecord
endsnippet
snippet isana
	it { should accept_nested_attributes_for :${0} }
endsnippet
snippet isbt
	it { should belong_to :${0} }
endsnippet
snippet isbtcc
	it { should belong_to(:${1}).counter_cache ${0:true} }
endsnippet
snippet ishbtm
	it { should have_and_belong_to_many :${0} }
endsnippet
snippet isbv
	it { should be_valid }
endsnippet
snippet ishc
	it { should have_db_column :${0} }
endsnippet
snippet ishi
	it { should have_db_index :${0} }
endsnippet
snippet ishm
	it { should have_many :${0} }
endsnippet
snippet ishmt
	it { should have_many(:${1}).through :${0} }
endsnippet
snippet isho
	it { should have_one :${0} }
endsnippet
snippet ishro
	it { should have_readonly_attribute :${0} }
endsnippet
snippet iss
	it { should serialize :${0} }
endsnippet
snippet isres
	it { should respond_to :${0} }
endsnippet
snippet isresw
	it { should respond_to(:${1}).with(${0}).arguments }
endsnippet
snippet super_call
	${1:super_class}.instance_method(:${0:method}).bind(self).call
endsnippet
