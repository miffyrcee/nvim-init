# Closure loop
snippet forinlet
	for ${1:name} in ${2:array}
		let $1
			${3}
# Array comprehension
endsnippet
snippet fora
	for ${1:name} in ${2:array}
		${3}
# Object comprehension
endsnippet
snippet foro
	for ${1:key}, ${2:value} of ${3:object}
		${4}
# Range comprehension (inclusive)
endsnippet
snippet forr
	for ${1:name} from ${2:start} to ${3:finish}
		${4}
endsnippet
snippet forrb
	for ${1:name} from ${2:start} to ${3:finish} by ${4:step}
		${5}
# Range comprehension (exclusive)
endsnippet
snippet forrex
	for ${1:name} from ${2:start} til ${3:finish}
		${4}
endsnippet
snippet forrexb
	for ${1:name} from ${2:start} til ${3:finish} by ${4:step}
		${5}
# Function
endsnippet
snippet fun
	(${1:args}) ->
		${2}
# Function (bound)
endsnippet
snippet bfun
	(${1:args}) ~>
		${2}
# Class
endsnippet
snippet cla class ..
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
endsnippet
snippet cla class .. constructor: ..
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		(${2:args}) ->
			${3}

		${4}
endsnippet
snippet cla class .. extends ..
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} extends ${2:ParentClass}
		${3}
endsnippet
snippet cla class .. extends .. constructor: ..
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} extends ${2:ParentClass}
		(${3:args}) ->
			${4}

		${5}
# If
endsnippet
snippet if
	if ${1:condition}
		${2}
# If __ Else
endsnippet
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
# Else if
endsnippet
snippet elif
	else if ${1:condition}
		${2}
# Ternary If
endsnippet
snippet ifte
	if ${1:condition} then ${2:value} else ${3:other}
# Unless
endsnippet
snippet unl
	${1:action} unless ${2:condition}
# Switch
endsnippet
snippet swi
	switch ${1:object}
	case ${2:value}
		${3}
	default void
endsnippet
snippet mat
	match ${1:object}
	| ${2:value} => ${3}
	| otherwise => void

# Log
endsnippet
snippet log
	console.log ${1}
# stringify
endsnippet
snippet str
	JSON.stringify ${1}, void, 2

# Try __ Catch
endsnippet
snippet try
	try
		${1:${VISUAL}}
	catch ${2:error}
		${3}
# Require
endsnippet
snippet req
	${2:$1} = require '${1}'${3}
# Require!
endsnippet
snippet req!
	require! ${1}

# Export
endsnippet
snippet exp
	${1:root} = exports ? this
endsnippet
